-- MySQL Script generated by MySQL Workbench
-- Tue Oct 21 17:18:58 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema level3
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `level3` ;

-- -----------------------------------------------------
-- Schema level3
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `level3` DEFAULT CHARACTER SET utf8 ;
USE `level3` ;

-- -----------------------------------------------------
-- Table `level3`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`users` ;

CREATE TABLE IF NOT EXISTS `level3`.`users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NOT NULL,
  `passcode` VARCHAR(45) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `birth_date` DATE NOT NULL,
  `gender` VARCHAR(45) NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  `postcode` VARCHAR(45) NOT NULL,
  `user_type` ENUM('free', 'premium') NOT NULL,
  PRIMARY KEY (`user_id`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `email_UNIQUE` ON `level3`.`users` (`email` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`subscriptions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`subscriptions` ;

CREATE TABLE IF NOT EXISTS `level3`.`subscriptions` (
  `subscription_id` INT NOT NULL AUTO_INCREMENT,
  `start_date` DATE NOT NULL,
  `renovation_date` DATE NOT NULL,
  `payment` ENUM('credit_card', 'paypal') NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`subscription_id`),
  CONSTRAINT `subscription_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `subscription_user_idx` ON `level3`.`subscriptions` (`user_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`credit_cards`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`credit_cards` ;

CREATE TABLE IF NOT EXISTS `level3`.`credit_cards` (
  `credit_card_id` INT NOT NULL AUTO_INCREMENT,
  `card_number` VARCHAR(45) NOT NULL,
  `expiration_month` INT NOT NULL,
  `expiration_year` INT NOT NULL,
  `security_number` INT NOT NULL,
  `subscription_id` INT NOT NULL,
  PRIMARY KEY (`credit_card_id`),
  CONSTRAINT `credit_card_subscription`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `level3`.`subscriptions` (`subscription_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `card_number_UNIQUE` ON `level3`.`credit_cards` (`card_number` ASC) VISIBLE;

CREATE INDEX `credit_card_subscription_idx` ON `level3`.`credit_cards` (`subscription_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`paypals`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`paypals` ;

CREATE TABLE IF NOT EXISTS `level3`.`paypals` (
  `paypal_id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `subscription_id` INT NOT NULL,
  PRIMARY KEY (`paypal_id`),
  CONSTRAINT `paypal_subscription`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `level3`.`subscriptions` (`subscription_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `username_UNIQUE` ON `level3`.`paypals` (`username` ASC) VISIBLE;

CREATE INDEX `paypal_subscription_idx` ON `level3`.`paypals` (`subscription_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`payments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`payments` ;

CREATE TABLE IF NOT EXISTS `level3`.`payments` (
  `payment_id` INT NOT NULL AUTO_INCREMENT,
  `payment_date` DATE NOT NULL,
  `order_number` INT NOT NULL,
  `total` FLOAT NOT NULL,
  `subscription_id` INT NOT NULL,
  PRIMARY KEY (`payment_id`),
  CONSTRAINT `payment_subscription`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `level3`.`subscriptions` (`subscription_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `number_UNIQUE` ON `level3`.`payments` (`order_number` ASC) VISIBLE;

CREATE INDEX `payment_subscription_idx` ON `level3`.`payments` (`subscription_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`playlists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`playlists` ;

CREATE TABLE IF NOT EXISTS `level3`.`playlists` (
  `playlist_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `songs_amount` INT NOT NULL,
  `creation_date` DATE NOT NULL,
  `user_id` INT NOT NULL,
  `state` ENUM('active', 'deleted') NOT NULL,
  `delete_date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`playlist_id`),
  CONSTRAINT `playlist_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_playlist_user1_idx` ON `level3`.`playlists` (`user_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`artists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`artists` ;

CREATE TABLE IF NOT EXISTS `level3`.`artists` (
  `artist_id` INT NOT NULL AUTO_INCREMENT,
  `artist_name` VARCHAR(45) NOT NULL,
  `image` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`artist_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`albums`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`albums` ;

CREATE TABLE IF NOT EXISTS `level3`.`albums` (
  `album_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `release_year` INT NOT NULL,
  `image` VARCHAR(45) NOT NULL,
  `artist_id` INT NOT NULL,
  PRIMARY KEY (`album_id`),
  CONSTRAINT `album_artist`
    FOREIGN KEY (`artist_id`)
    REFERENCES `level3`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `album_artist_idx` ON `level3`.`albums` (`artist_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`songs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`songs` ;

CREATE TABLE IF NOT EXISTS `level3`.`songs` (
  `song_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `duration` INT NOT NULL,
  `plays` INT NOT NULL,
  `album_id` INT NOT NULL,
  PRIMARY KEY (`song_id`),
  CONSTRAINT `song_album`
    FOREIGN KEY (`album_id`)
    REFERENCES `level3`.`albums` (`album_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `song_album_idx` ON `level3`.`songs` (`album_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`follow_artists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`follow_artists` ;

CREATE TABLE IF NOT EXISTS `level3`.`follow_artists` (
  `artist_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`artist_id`, `user_id`),
  CONSTRAINT `follow_artist`
    FOREIGN KEY (`artist_id`)
    REFERENCES `level3`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `follow_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `follow_user_idx` ON `level3`.`follow_artists` (`user_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`fav_songs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`fav_songs` ;

CREATE TABLE IF NOT EXISTS `level3`.`fav_songs` (
  `song_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`song_id`, `user_id`),
  CONSTRAINT `fav_song_song`
    FOREIGN KEY (`song_id`)
    REFERENCES `level3`.`songs` (`song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fav_song_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `song_like_user_idx` ON `level3`.`fav_songs` (`user_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`fav_albums`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`fav_albums` ;

CREATE TABLE IF NOT EXISTS `level3`.`fav_albums` (
  `album_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`album_id`, `user_id`),
  CONSTRAINT `fav_album_album`
    FOREIGN KEY (`album_id`)
    REFERENCES `level3`.`albums` (`album_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fav_album_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `album_like_user_idx` ON `level3`.`fav_albums` (`user_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`shared_playlists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`shared_playlists` ;

CREATE TABLE IF NOT EXISTS `level3`.`shared_playlists` (
  `playlist_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`playlist_id`, `user_id`),
  CONSTRAINT `shared_playlist_playlist`
    FOREIGN KEY (`playlist_id`)
    REFERENCES `level3`.`playlists` (`playlist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `shared_playlist_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `shared_playlist_user_idx` ON `level3`.`shared_playlists` (`user_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`playlist_songs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`playlist_songs` ;

CREATE TABLE IF NOT EXISTS `level3`.`playlist_songs` (
  `playlist_id` INT NOT NULL,
  `song_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `entry_date` DATE NOT NULL,
  PRIMARY KEY (`playlist_id`, `song_id`, `user_id`),
  CONSTRAINT `playlist_song_playlist`
    FOREIGN KEY (`playlist_id`)
    REFERENCES `level3`.`playlists` (`playlist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `playlist_song_song`
    FOREIGN KEY (`song_id`)
    REFERENCES `level3`.`songs` (`song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `playlist_song_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `playlist_song_song_idx` ON `level3`.`playlist_songs` (`song_id` ASC) VISIBLE;

CREATE INDEX `playlist_song_user_idx` ON `level3`.`playlist_songs` (`user_id` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `level3`.`related_artists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`related_artists` ;

CREATE TABLE IF NOT EXISTS `level3`.`related_artists` (
  `artist_id` INT NOT NULL,
  `related_id` INT NOT NULL,
  PRIMARY KEY (`artist_id`, `related_id`),
  CONSTRAINT `related_artist_artist`
    FOREIGN KEY (`artist_id`)
    REFERENCES `level3`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `related_artist_related`
    FOREIGN KEY (`related_id`)
    REFERENCES `level3`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `related_artist_related_idx` ON `level3`.`related_artists` (`related_id` ASC) VISIBLE;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
