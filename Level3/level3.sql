-- MySQL Script generated by MySQL Workbench
-- Wed Oct 22 09:42:34 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema level3
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `level3` ;

-- -----------------------------------------------------
-- Schema level3
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `level3` DEFAULT CHARACTER SET utf8 ;
USE `level3` ;

-- -----------------------------------------------------
-- Table `level3`.`users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`users` ;

CREATE TABLE IF NOT EXISTS `level3`.`users` (
  `user_id` INT NOT NULL AUTO_INCREMENT,
  `email` VARCHAR(45) NOT NULL,
  `passcode` VARCHAR(45) NOT NULL,
  `username` VARCHAR(45) NOT NULL,
  `birth_date` DATE NOT NULL,
  `gender` VARCHAR(45) NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  `postcode` VARCHAR(45) NOT NULL,
  `user_type` ENUM('free', 'premium') NOT NULL,
  PRIMARY KEY (`user_id`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`subscriptions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`subscriptions` ;

CREATE TABLE IF NOT EXISTS `level3`.`subscriptions` (
  `subscription_id` INT NOT NULL AUTO_INCREMENT,
  `start_date` DATE NOT NULL,
  `renovation_date` DATE NOT NULL,
  `payment` ENUM('credit_card', 'paypal') NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`subscription_id`),
  INDEX `subscription_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `subscription_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`credit_cards`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`credit_cards` ;

CREATE TABLE IF NOT EXISTS `level3`.`credit_cards` (
  `credit_card_id` INT NOT NULL AUTO_INCREMENT,
  `card_number` VARCHAR(45) NOT NULL,
  `expiration_month` INT NOT NULL,
  `expiration_year` INT NOT NULL,
  `security_number` INT NOT NULL,
  `subscription_id` INT NOT NULL,
  PRIMARY KEY (`credit_card_id`),
  UNIQUE INDEX `card_number_UNIQUE` (`card_number` ASC) VISIBLE,
  INDEX `credit_card_subscription_idx` (`subscription_id` ASC) VISIBLE,
  CONSTRAINT `credit_card_subscription`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `level3`.`subscriptions` (`subscription_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`paypals`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`paypals` ;

CREATE TABLE IF NOT EXISTS `level3`.`paypals` (
  `paypal_id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(45) NOT NULL,
  `subscription_id` INT NOT NULL,
  PRIMARY KEY (`paypal_id`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  INDEX `paypal_subscription_idx` (`subscription_id` ASC) VISIBLE,
  CONSTRAINT `paypal_subscription`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `level3`.`subscriptions` (`subscription_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`payments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`payments` ;

CREATE TABLE IF NOT EXISTS `level3`.`payments` (
  `payment_id` INT NOT NULL AUTO_INCREMENT,
  `payment_date` DATE NOT NULL,
  `order_number` INT NOT NULL,
  `total` FLOAT NOT NULL,
  `subscription_id` INT NOT NULL,
  UNIQUE INDEX `number_UNIQUE` (`order_number` ASC) VISIBLE,
  PRIMARY KEY (`payment_id`),
  INDEX `payment_subscription_idx` (`subscription_id` ASC) VISIBLE,
  CONSTRAINT `payment_subscription`
    FOREIGN KEY (`subscription_id`)
    REFERENCES `level3`.`subscriptions` (`subscription_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`playlists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`playlists` ;

CREATE TABLE IF NOT EXISTS `level3`.`playlists` (
  `playlist_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `songs_amount` INT NOT NULL,
  `creation_date` DATE NOT NULL,
  `user_id` INT NOT NULL,
  `state` ENUM('active', 'deleted') NOT NULL,
  `delete_date` DATE NULL DEFAULT NULL,
  PRIMARY KEY (`playlist_id`),
  INDEX `playlist_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `playlist_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`artists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`artists` ;

CREATE TABLE IF NOT EXISTS `level3`.`artists` (
  `artist_id` INT NOT NULL AUTO_INCREMENT,
  `artist_name` VARCHAR(45) NOT NULL,
  `image` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`artist_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`albums`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`albums` ;

CREATE TABLE IF NOT EXISTS `level3`.`albums` (
  `album_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `release_year` INT NOT NULL,
  `image` VARCHAR(45) NOT NULL,
  `artist_id` INT NOT NULL,
  PRIMARY KEY (`album_id`),
  INDEX `album_artist_idx` (`artist_id` ASC) VISIBLE,
  CONSTRAINT `album_artist`
    FOREIGN KEY (`artist_id`)
    REFERENCES `level3`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`songs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`songs` ;

CREATE TABLE IF NOT EXISTS `level3`.`songs` (
  `song_id` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(45) NOT NULL,
  `duration` INT NOT NULL,
  `plays` INT NOT NULL,
  `album_id` INT NOT NULL,
  PRIMARY KEY (`song_id`),
  INDEX `song_album_idx` (`album_id` ASC) VISIBLE,
  CONSTRAINT `song_album`
    FOREIGN KEY (`album_id`)
    REFERENCES `level3`.`albums` (`album_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`follow_artists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`follow_artists` ;

CREATE TABLE IF NOT EXISTS `level3`.`follow_artists` (
  `artist_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`artist_id`, `user_id`),
  INDEX `follow_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `follow_artist`
    FOREIGN KEY (`artist_id`)
    REFERENCES `level3`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `follow_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`fav_songs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`fav_songs` ;

CREATE TABLE IF NOT EXISTS `level3`.`fav_songs` (
  `song_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`song_id`, `user_id`),
  INDEX `song_like_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fav_song_song`
    FOREIGN KEY (`song_id`)
    REFERENCES `level3`.`songs` (`song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fav_song_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`fav_albums`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`fav_albums` ;

CREATE TABLE IF NOT EXISTS `level3`.`fav_albums` (
  `album_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`album_id`, `user_id`),
  INDEX `album_like_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `fav_album_album`
    FOREIGN KEY (`album_id`)
    REFERENCES `level3`.`albums` (`album_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fav_album_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`shared_playlists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`shared_playlists` ;

CREATE TABLE IF NOT EXISTS `level3`.`shared_playlists` (
  `playlist_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  PRIMARY KEY (`playlist_id`, `user_id`),
  INDEX `shared_playlist_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `shared_playlist_playlist`
    FOREIGN KEY (`playlist_id`)
    REFERENCES `level3`.`playlists` (`playlist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `shared_playlist_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`playlist_songs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`playlist_songs` ;

CREATE TABLE IF NOT EXISTS `level3`.`playlist_songs` (
  `playlist_id` INT NOT NULL,
  `song_id` INT NOT NULL,
  `user_id` INT NOT NULL,
  `entry_date` DATE NOT NULL,
  PRIMARY KEY (`playlist_id`, `song_id`, `user_id`),
  INDEX `playlist_song_song_idx` (`song_id` ASC) VISIBLE,
  INDEX `playlist_song_user_idx` (`user_id` ASC) VISIBLE,
  CONSTRAINT `playlist_song_playlist`
    FOREIGN KEY (`playlist_id`)
    REFERENCES `level3`.`playlists` (`playlist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `playlist_song_song`
    FOREIGN KEY (`song_id`)
    REFERENCES `level3`.`songs` (`song_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `playlist_song_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `level3`.`users` (`user_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level3`.`related_artists`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level3`.`related_artists` ;

CREATE TABLE IF NOT EXISTS `level3`.`related_artists` (
  `artist_id` INT NOT NULL,
  `related_id` INT NOT NULL,
  PRIMARY KEY (`artist_id`, `related_id`),
  INDEX `related_artist_related_idx` (`related_id` ASC) VISIBLE,
  CONSTRAINT `related_artist_artist`
    FOREIGN KEY (`artist_id`)
    REFERENCES `level3`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `related_artist_related`
    FOREIGN KEY (`related_id`)
    REFERENCES `level3`.`artists` (`artist_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Inserting sample data into tables
-- -----------------------------------------------------

-- Users
INSERT INTO users
(email, passcode, username, birth_date, gender, country, postcode, user_type)
VALUES
('albert@example.com','1234','Albert','1999-11-12','F','Spain','08001','free'),
('joan@example.com','5678','Joan','1990-06-21','M','Spain','08002','premium'),
('anna@example.com','12345678','Anna','2010-09-11','F','Spain','08003','premium');

-- Subscriptions
INSERT INTO subscriptions
(start_date, renovation_date, payment, user_id)
VALUES
('2025-01-01','2025-04-01','credit_card',2),
('2025-01-12','2025-04-12','paypal',3);

-- Credit cards
INSERT INTO credit_cards
(card_number, expiration_month, expiration_year, security_number, subscription_id)
VALUES
('1234567812345678',12,2026,'123',1);

-- Paypals
INSERT INTO paypals
(username, subscription_id)
VALUES
('anna_paypal',2);

-- Payments
INSERT INTO payments
(payment_date, order_number, total, subscription_id)
VALUES
('2025-01-01',1,9.99,1),
('2025-01-12',2,9.99,2);

-- Artists
INSERT INTO artists
(artist_name, image)
VALUES
('Queen','queen.png'),
('Coldplay','coldplay.png'),
('Green Day','green-day.png');

-- Related artists
INSERT INTO related_artists
(artist_id, related_id)
VALUES
(1,2);

-- Albums
INSERT INTO albums
(title, release_year, image, artist_id)
VALUES
('A Night At The Opera',1981,'a-night-at-the-opera.png',1),
('Music of the Spheres',2021,'music-of-the-spheres.png',2),
('American Idiot',2004,'american-idiot.jpg',3);

-- Songs
INSERT INTO songs
(title, duration, plays, album_id)
VALUES
('Bohemian Rhapsody',355,5000000,1),
('Coloratura',618,1000000,2),
('Wake Me Up When September Ends',285,2000000,3);

-- Playlists
INSERT INTO playlists
(title, songs_amount, creation_date, user_id, state, delete_date)
VALUES
('Pop',1,'2025-01-20',1,'active',NULL),
('Rock',2,'2025-01-15',2,'active',NULL),
('Deleted Playlist',1,'2025-01-18',3,'deleted','2025-01-22');

-- Shared playlists
INSERT INTO shared_playlists
(playlist_id, user_id)
VALUES
(2,1);

-- Playlist songs
INSERT INTO playlist_songs
(playlist_id, song_id, user_id, entry_date)
VALUES
(1,2,1,'2025-01-23'),
(2,1,1,'2025-01-23'),
(2,3,2,'2025-01-23');

-- Fav songs
INSERT INTO fav_songs
(song_id, user_id)
VALUES
(1,1);

-- Fav albums
INSERT INTO fav_albums
(album_id, user_id)
VALUES
(1,2);
 
 -- Follow artists
INSERT INTO follow_artists
(artist_id, user_id)
VALUES
(1,1),
(2,2);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------
-- Testing with some queries
-- -----------------------------------------------------

-- Show users table
SELECT * FROM users;

-- Show subscriptions table
SELECT * FROM subscriptions;

-- Show credit cards table
SELECT * FROM credit_cards;

-- Show paypals table
SELECT * FROM paypals;

-- Show payments table
SELECT * FROM payments;

-- Show artists table
SELECT * FROM artists;

-- Show related artists table
SELECT * FROM related_artists;

-- Show albums table
SELECT * FROM albums;

-- Show songs table
SELECT * FROM songs;

-- Show playlists table
SELECT * FROM playlists;

-- Show shared playlists table
SELECT * FROM shared_playlists;

-- Show playlist songs table
SELECT * FROM playlist_songs;

-- Show fav songs table
SELECT * FROM fav_songs;

-- Show fav albums table
SELECT * FROM fav_albums;

-- Show follow artists table
SELECT * FROM follow_artists;