-- MySQL Script generated by MySQL Workbench
-- Tue Oct 21 22:10:59 2025
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema level1ex1
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `level1ex1` ;

-- -----------------------------------------------------
-- Schema level1ex1
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `level1ex1` DEFAULT CHARACTER SET utf8 ;
USE `level1ex1` ;

-- -----------------------------------------------------
-- Table `level1ex1`.`addresses`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level1ex1`.`addresses` ;

CREATE TABLE IF NOT EXISTS `level1ex1`.`addresses` (
  `address_id` INT NOT NULL AUTO_INCREMENT,
  `street` VARCHAR(45) NOT NULL,
  `street_number` VARCHAR(45) NOT NULL,
  `floor` VARCHAR(45) NULL,
  `door` VARCHAR(45) NULL,
  `city` VARCHAR(45) NOT NULL,
  `postcode` VARCHAR(45) NOT NULL,
  `country` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`address_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level1ex1`.`suppliers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level1ex1`.`suppliers` ;

CREATE TABLE IF NOT EXISTS `level1ex1`.`suppliers` (
  `supplier_id` INT NOT NULL AUTO_INCREMENT,
  `supplier_name` VARCHAR(45) NOT NULL,
  `address_id` INT NOT NULL,
  `telephone` VARCHAR(45) NOT NULL,
  `fax` VARCHAR(45) NOT NULL,
  `nif` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`supplier_id`),
  UNIQUE INDEX `nif_UNIQUE` (`nif` ASC) VISIBLE,
  INDEX `provider_address_idx` (`address_id` ASC) VISIBLE,
  CONSTRAINT `provider_address`
    FOREIGN KEY (`address_id`)
    REFERENCES `level1ex1`.`addresses` (`address_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level1ex1`.`brands`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level1ex1`.`brands` ;

CREATE TABLE IF NOT EXISTS `level1ex1`.`brands` (
  `brand_id` INT NOT NULL AUTO_INCREMENT,
  `brand_name` VARCHAR(45) NOT NULL,
  `supplier_id` INT NOT NULL,
  PRIMARY KEY (`brand_id`),
  INDEX `brand_provider_idx` (`supplier_id` ASC) VISIBLE,
  CONSTRAINT `brand_provider`
    FOREIGN KEY (`supplier_id`)
    REFERENCES `level1ex1`.`suppliers` (`supplier_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level1ex1`.`glasses`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level1ex1`.`glasses` ;

CREATE TABLE IF NOT EXISTS `level1ex1`.`glasses` (
  `glasses_id` INT NOT NULL AUTO_INCREMENT,
  `lens_prescription_left` FLOAT NOT NULL,
  `lens_prescription_right` FLOAT NOT NULL,
  `frame_type` ENUM('rimless', 'plastic', 'metal') NOT NULL,
  `frame_color` VARCHAR(45) NOT NULL,
  `lens_color_left` VARCHAR(45) NOT NULL,
  `lens_color_right` VARCHAR(45) NOT NULL,
  `price` FLOAT NOT NULL,
  `brand_id` INT NOT NULL,
  PRIMARY KEY (`glasses_id`),
  INDEX `glasses_brand_idx` (`brand_id` ASC) VISIBLE,
  CONSTRAINT `glasses_brand`
    FOREIGN KEY (`brand_id`)
    REFERENCES `level1ex1`.`brands` (`brand_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level1ex1`.`customers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level1ex1`.`customers` ;

CREATE TABLE IF NOT EXISTS `level1ex1`.`customers` (
  `customer_id` INT NOT NULL AUTO_INCREMENT,
  `customer_name` VARCHAR(45) NOT NULL,
  `address_id` INT NOT NULL,
  `telephone` VARCHAR(45) NOT NULL,
  `email` VARCHAR(45) NOT NULL,
  `registration_date` DATE NOT NULL,
  `recommender_id` INT NULL,
  PRIMARY KEY (`customer_id`),
  INDEX `recommender_idx` (`recommender_id` ASC) VISIBLE,
  INDEX `customer_address_idx` (`address_id` ASC) VISIBLE,
  CONSTRAINT `customer_recommender`
    FOREIGN KEY (`recommender_id`)
    REFERENCES `level1ex1`.`customers` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `customer_address`
    FOREIGN KEY (`address_id`)
    REFERENCES `level1ex1`.`addresses` (`address_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level1ex1`.`sellers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level1ex1`.`sellers` ;

CREATE TABLE IF NOT EXISTS `level1ex1`.`sellers` (
  `seller_id` INT NOT NULL AUTO_INCREMENT,
  `seller_name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`seller_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `level1ex1`.`sales`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `level1ex1`.`sales` ;

CREATE TABLE IF NOT EXISTS `level1ex1`.`sales` (
  `sale_id` INT NOT NULL AUTO_INCREMENT,
  `seller_id` INT NOT NULL,
  `customer_id` INT NOT NULL,
  `glasses_id` INT NOT NULL,
  `sale_date` DATE NOT NULL,
  PRIMARY KEY (`sale_id`),
  INDEX `seller_idx` (`seller_id` ASC) VISIBLE,
  INDEX `glasses_idx` (`glasses_id` ASC) VISIBLE,
  INDEX `customer_idx` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `sale_seller`
    FOREIGN KEY (`seller_id`)
    REFERENCES `level1ex1`.`sellers` (`seller_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `sale_customer`
    FOREIGN KEY (`customer_id`)
    REFERENCES `level1ex1`.`customers` (`customer_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `sale_glasses`
    FOREIGN KEY (`glasses_id`)
    REFERENCES `level1ex1`.`glasses` (`glasses_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Inserting sample data into tables
-- -----------------------------------------------------

-- Addresses
INSERT INTO addresses
(street, street_number, floor, door, city, postcode, country)
VALUES 
('Street A', '11', '1', 'A', 'Barcelona', '08001', 'Spain'),
('Street B', '22', 2, 'B', 'Barcelona', '08001', 'Spain'),
('Street C', '33', 3, 'C', 'Barcelona', '08001', 'Spain'),
('Street D', '44', NULL, NULL, 'Barcelona', '08001', 'Spain');

-- Suppliers
INSERT INTO suppliers
(supplier_name, address_id, telephone, fax, nif)
VALUES 
('Supplier 1', 1, '666666666', '931111111', '12345678A'),
('Supplier 2', 2, '666777888', '932222222', '87654321B');

-- Brands
INSERT INTO brands
(brand_name, supplier_id)
VALUES 
('Ray Ban', 1),
('Oakley', 2);

-- Glasses
INSERT INTO glasses
(lens_prescription_left, lens_prescription_right, frame_type, frame_color, lens_color_left, lens_color_right, price, brand_id)
VALUES
(1.25, 1.50, 'plastic', 'black', 'transparent', 'transparent', 300.00, 1),
(0.75, 1.00, 'metal', 'gold', 'dark', 'dark', 100.00, 2),
(2.00, 2.25, 'rimless', 'silver', 'transparent', 'transparent', 200.00, 1);

-- Customers
INSERT INTO customers
(customer_name, address_id, telephone, email, registration_date, recommender_id)
VALUES
('Albert', 3, '600123123', 'albert@example.com', '2025-01-01', NULL),
('Joan', 4, '600456456', 'joan@example.com', '2025-01-01', 1);

-- Sellers
INSERT INTO sellers
(seller_name)
VALUES 
('Anna'),
('Marc');

-- Sales
INSERT INTO sales
(seller_id, customer_id, glasses_id, sale_date)
VALUES
(1, 1, 1, '2025-01-10'),
(2, 1, 3, '2025-01-20'),
(1, 2, 2, '2025-01-30'),
(2, 1, 2, '2025-02-10'),
(1, 2, 1, '2025-03-30'),
(1, 1, 2, '2025-04-30'),
(1, 2, 3, '2025-05-30');


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Testing with some queries
-- -----------------------------------------------------

-- Sales by a customer in a period of time
SELECT c.customer_name AS customer, COUNT(s.sale_id) AS number_of_sales, SUM(g.price) AS total_spent
FROM sales s
JOIN customers c ON s.customer_id = c.customer_id
JOIN glasses g ON s.glasses_id = g.glasses_id
WHERE c.customer_id = 1 AND s.sale_date BETWEEN '2025-01-01' AND '2025-01-31'
GROUP BY c.customer_name;

-- Glasses sold by a seller in a year
SELECT sel.seller_name AS seller, b.brand_name AS brand, g.frame_type, g.frame_color, g.lens_color_left, g.lens_color_right, COUNT(*) AS unitats_venudes
FROM sales s
JOIN sellers sel ON s.seller_id = sel.seller_id
JOIN glasses g ON s.glasses_id = g.glasses_id
JOIN brands b ON g.brand_id = b.brand_id
WHERE sel.seller_id = 1 AND s.sale_date BETWEEN '2025-01-01' AND '2025-12-31'
GROUP BY sel.seller_name, b.brand_name, g.frame_type, g.frame_color, g.lens_color_left, g.lens_color_right;

-- Providers with any glasses sold
SELECT DISTINCT sup.supplier_name AS supplier
FROM sales s
JOIN glasses g ON s.glasses_id = g.glasses_id
JOIN brands b ON g.brand_id = b.brand_id
JOIN suppliers sup ON b.supplier_id = sup.supplier_id;